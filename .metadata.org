#+EXPORT_FILE_NAME: README.md
#+OPTIONS: toc:nil |:t ^:nil tags:nil

#+NAME: name
#+BEGIN_SRC text :exports none :noweb yes
kicad-libraries
#+END_SRC

#+NAME: version
#+BEGIN_SRC text :exports none :noweb yes
0.1.0
#+END_SRC

#+NAME: release-month-day
#+BEGIN_SRC text :exports none :noweb yes
11-08
#+END_SRC

#+NAME: release-year
#+BEGIN_SRC text :exports none :noweb yes
2022
#+END_SRC

#+NAME: release-date
#+BEGIN_SRC text :exports none :noweb yes
<<release-year>>-<<release-month-day>>
#+END_SRC

#+NAME: creation-date
#+BEGIN_SRC text :exports none :noweb yes
2014-11-24
#+END_SRC

#+NAME: description
#+BEGIN_SRC text :exports none :noweb yes
Collection of KiCad components and footprints.
#+END_SRC

#+NAME: license
#+BEGIN_SRC text :exports none :noweb yes
BSD-3-Clause
#+END_SRC

#+NAME: guix-license
#+BEGIN_SRC text :exports none :noweb yes
license:bsd-3
#+END_SRC

#+NAME: license-files
#+BEGIN_SRC text :exports none :noweb yes
LICENSE
#+END_SRC

#+NAME: repository-name
#+BEGIN_SRC text :exports none :noweb yes
kicad-libraries
#+END_SRC

#+NAME: repository-organization
#+BEGIN_SRC text :exports none :noweb yes
janelia-kicad
#+END_SRC

#+NAME: repository-url
#+BEGIN_SRC text :exports none :noweb yes
https://github.com/<<repository-organization>>/<<repository-name>>
#+END_SRC

#+NAME: code-repository
#+BEGIN_SRC text :exports none :noweb yes
git+<<repository-url>>.git
#+END_SRC

#+NAME: guix-name
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+NAME: author-given-name
#+BEGIN_SRC text :exports none :noweb yes
Peter
#+END_SRC

#+NAME: author-family-name
#+BEGIN_SRC text :exports none :noweb yes
Polidoro
#+END_SRC

#+NAME: author
#+BEGIN_SRC text :exports none :noweb yes
<<author-given-name>> <<author-family-name>>
#+END_SRC

#+NAME: email
#+BEGIN_SRC text :exports none :noweb yes
peter@polidoro.io
#+END_SRC

#+NAME: affiliation
#+BEGIN_SRC text :exports none :noweb yes
Howard Hughes Medical Institute
#+END_SRC

#+NAME: copyright
#+BEGIN_SRC text :exports none :noweb yes
<<release-year>> <<affiliation>>
#+END_SRC

#+NAME: programming-language
#+BEGIN_SRC text :exports none :noweb yes
KiCad
#+END_SRC

#+NAME: guix-dependencies
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+NAME: references
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+NAME: command-line-interface
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+BEGIN_EXAMPLE
<!---
This file is generated automatically from .metadata.org
File edits may be overwritten!
--->
#+END_EXAMPLE

* About

#+BEGIN_SRC markdown :noweb yes
- Name: <<name>>
- Description: <<description>>
- Version: <<version>>
- Date: <<release-date>>
- License: <<license>>
- URL: <<repository-url>>
- Author: <<author>>
- Email: <<email>>
- Copyright: <<copyright>>
- References:
  - <<references>>
#+END_SRC


* Install Kicad

** Windows or MacOS

Download and install.

[[https://www.kicad.org/download/]]

** Linux

*** Ubuntu

#+BEGIN_SRC sh

sudo add-apt-repository --yes ppa:kicad/kicad-6.0-releases
sudo apt update
sudo apt install --install-recommends kicad

#+END_SRC

*** Guix

**** Install Guix

[[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html][Install Guix]]

**** Install kicad

#+BEGIN_SRC sh

guix install kicad kicad-doc kicad-symbols kicad-footprints kicad-packages3d kicad-templates

#+END_SRC

* Setup Libraries

** Configure Paths

Preferences > Configure Paths

Add KICAD6_USER_DIR to be path of this cloned repository

** Manage Symbol Libraries

Preferences > Manage Symbol Libraries

Add library:

| Nickname | Library Path                         | Library Format |
|----------+--------------------------------------+----------------|
| Janelia  | ${KICAD6_USER_DIR}/janelia.kicad_sym | KiCad          |

** Manage Footprint Libraries

Preferences > Manage Footprint Libraries

Add library:

| Nickname | Library Path                      | Library Format |
|----------+-----------------------------------+----------------|
| Janelia  | ${KICAD6_USER_DIR}/janelia.pretty | KiCad          |

* Development

** Install Guix

[[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html][Install Guix]]

** Clone Repository

#+BEGIN_SRC sh :noweb yes
git clone <<repository-url>>
cd <<repository-name>>
#+END_SRC

** Edit .metadata.org

#+BEGIN_SRC sh :noweb yes
make metadata-edits
#+END_SRC

** Tangle .metadata.org

#+BEGIN_SRC sh :noweb yes
make metadata
#+END_SRC

** Edit files

#+BEGIN_SRC sh :noweb yes
make file-edits
exit
#+END_SRC

* Tangled Files                                                    :noexport:

#+BEGIN_SRC text :tangle AUTHORS :exports none :noweb yes
<<author>>
#+END_SRC

#+BEGIN_SRC text :tangle LICENSE :exports none :noweb yes
#+END_SRC

#+BEGIN_SRC js :tangle codemeta.json :exports none :noweb yes
{
    "@context": "https://doi.org/10.5063/schema/codemeta-2.0",
    "@type": "SoftwareSourceCode",
    "license": "https://spdx.org/licenses/<<license>>",
    "codeRepository": "<<code-repository>>",
    "dateCreated": "<<creation-date>>",
    "dateModified": "<<release-date>>",
    "name": "<<name>>",
    "version": "<<version>>",
    "description": "<<description>>",
    "programmingLanguage": [
        "<<programming-language>>"
    ],
    "author": [
        {
            "@type": "Person",
            "givenName": "<<author-given-name>>",
            "familyName": "<<author-family-name>>",
            "email": "<<email>>",
            "affiliation": {
                "@type": "Organization",
                "name": "<<affiliation>>"
            }
        }
    ]
}
#+END_SRC

#+BEGIN_SRC scheme :tangle .channels.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "f7f0c3b53cdefdf8b165bdb870809aeaf7e13a9d")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

#+BEGIN_SRC scheme :tangle .manifest.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(specifications->manifest
 '("kicad"
   "kicad-doc"
   "kicad-symbols"
   "kicad-footprints"
   "kicad-packages3d"
   "kicad-templates"
   "make"
   "bash"
   "git"
   "emacs"
   "emacs-org"
   "emacs-ox-gfm"))
#+END_SRC

#+BEGIN_SRC text :tangle Makefile :exports none :noweb yes
# This file is generated automatically from .metadata.org
# File edits may be overwritten!

upload: metadata package twine add clean

GUIX-SHELL = guix time-machine -C .channels.scm -- shell -m .manifest.scm
GUIX-CONTAINER = $(GUIX-SHELL) --container
GUIX-CONTAINER-GUI = $(GUIX-CONTAINER) -E "^DISPLAY$$" -E "^XAUTHORITY$$" --expose="$$XAUTHORITY" --expose=/tmp/.X11-unix/ --expose=$$HOME/.Xauthority --expose=/etc/machine-id

metadata-edits:
	$(GUIX-CONTAINER-GUI) -- sh -c "emacs -q --no-site-file --no-site-lisp --no-splash -l .init.el --file .metadata.org"

metadata:
	$(GUIX-CONTAINER) -- sh -c "emacs --batch -Q  -l .init.el --eval '(process-org \".metadata.org\")'"

file-edits:
	$(GUIX-SHELL) --pure -- kicad

add:
	$(GUIX-CONTAINER) -- sh -c "git add --all"

clean:
	$(GUIX-CONTAINER) -- sh -c "git clean -xdf"
#+END_SRC

#+BEGIN_SRC scheme :tangle .init.el :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(require 'org)

(eval-after-load "org"
  '(require 'ox-gfm nil t))

(setq make-backup-files nil)
(setq org-confirm-babel-evaluate nil)

(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)

(defun tangle-org (org-file)
  "Tangle org file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (org-babel-tangle-file org-file))

(defun export-org (org-file)
  "Export org file to gfm file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (let ((org-file-buffer (find-file-noselect org-file)))
    (with-current-buffer org-file-buffer
      (org-open-file (org-gfm-export-to-markdown)))))

(defun process-org (org-file)
  "Tangle and export org file"
  (progn (tangle-org org-file)
         (export-org org-file)))

#+END_SRC

